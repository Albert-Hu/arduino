
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000ee0  00000f74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ee0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080011c  0080011c  00000f90  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000658a  00000000  00000000  000012fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000201f  00000000  00000000  00007886  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000368a  00000000  00000000  000098a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000091c  00000000  00000000  0000cf30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000272f  00000000  00000000  0000d84c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003e02  00000000  00000000  0000ff7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000628  00000000  00000000  00013d7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	a3 c0       	rjmp	.+326    	; 0x148 <__ctors_end>
   2:	00 00       	nop
   4:	bc c0       	rjmp	.+376    	; 0x17e <__bad_interrupt>
   6:	00 00       	nop
   8:	ba c0       	rjmp	.+372    	; 0x17e <__bad_interrupt>
   a:	00 00       	nop
   c:	b8 c0       	rjmp	.+368    	; 0x17e <__bad_interrupt>
   e:	00 00       	nop
  10:	b6 c0       	rjmp	.+364    	; 0x17e <__bad_interrupt>
  12:	00 00       	nop
  14:	b4 c0       	rjmp	.+360    	; 0x17e <__bad_interrupt>
  16:	00 00       	nop
  18:	b2 c0       	rjmp	.+356    	; 0x17e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	b0 c0       	rjmp	.+352    	; 0x17e <__bad_interrupt>
  1e:	00 00       	nop
  20:	ae c0       	rjmp	.+348    	; 0x17e <__bad_interrupt>
  22:	00 00       	nop
  24:	ac c0       	rjmp	.+344    	; 0x17e <__bad_interrupt>
  26:	00 00       	nop
  28:	33 c3       	rjmp	.+1638   	; 0x690 <__vector_10>
  2a:	00 00       	nop
  2c:	fd c3       	rjmp	.+2042   	; 0x828 <__vector_11>
  2e:	00 00       	nop
  30:	a6 c0       	rjmp	.+332    	; 0x17e <__bad_interrupt>
  32:	00 00       	nop
  34:	a4 c0       	rjmp	.+328    	; 0x17e <__bad_interrupt>
  36:	00 00       	nop
  38:	a2 c0       	rjmp	.+324    	; 0x17e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	a0 c0       	rjmp	.+320    	; 0x17e <__bad_interrupt>
  3e:	00 00       	nop
  40:	9e c0       	rjmp	.+316    	; 0x17e <__bad_interrupt>
  42:	00 00       	nop
  44:	9c c0       	rjmp	.+312    	; 0x17e <__bad_interrupt>
  46:	00 00       	nop
  48:	9a c0       	rjmp	.+308    	; 0x17e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	98 c0       	rjmp	.+304    	; 0x17e <__bad_interrupt>
  4e:	00 00       	nop
  50:	96 c0       	rjmp	.+300    	; 0x17e <__bad_interrupt>
  52:	00 00       	nop
  54:	94 c0       	rjmp	.+296    	; 0x17e <__bad_interrupt>
  56:	00 00       	nop
  58:	92 c0       	rjmp	.+292    	; 0x17e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	90 c0       	rjmp	.+288    	; 0x17e <__bad_interrupt>
  5e:	00 00       	nop
  60:	8e c0       	rjmp	.+284    	; 0x17e <__bad_interrupt>
  62:	00 00       	nop
  64:	8c c0       	rjmp	.+280    	; 0x17e <__bad_interrupt>
  66:	00 00       	nop
  68:	8a c0       	rjmp	.+276    	; 0x17e <__bad_interrupt>
  6a:	00 00       	nop
  6c:	88 c0       	rjmp	.+272    	; 0x17e <__bad_interrupt>
  6e:	00 00       	nop
  70:	86 c0       	rjmp	.+268    	; 0x17e <__bad_interrupt>
  72:	00 00       	nop
  74:	84 c0       	rjmp	.+264    	; 0x17e <__bad_interrupt>
  76:	00 00       	nop
  78:	82 c0       	rjmp	.+260    	; 0x17e <__bad_interrupt>
  7a:	00 00       	nop
  7c:	80 c0       	rjmp	.+256    	; 0x17e <__bad_interrupt>
  7e:	00 00       	nop
  80:	7e c0       	rjmp	.+252    	; 0x17e <__bad_interrupt>
  82:	00 00       	nop
  84:	7c c0       	rjmp	.+248    	; 0x17e <__bad_interrupt>
  86:	00 00       	nop
  88:	7a c0       	rjmp	.+244    	; 0x17e <__bad_interrupt>
  8a:	00 00       	nop
  8c:	78 c0       	rjmp	.+240    	; 0x17e <__bad_interrupt>
  8e:	00 00       	nop
  90:	76 c0       	rjmp	.+236    	; 0x17e <__bad_interrupt>
  92:	00 00       	nop
  94:	74 c0       	rjmp	.+232    	; 0x17e <__bad_interrupt>
  96:	00 00       	nop
  98:	72 c0       	rjmp	.+228    	; 0x17e <__bad_interrupt>
  9a:	00 00       	nop
  9c:	70 c0       	rjmp	.+224    	; 0x17e <__bad_interrupt>
  9e:	00 00       	nop
  a0:	6e c0       	rjmp	.+220    	; 0x17e <__bad_interrupt>
  a2:	00 00       	nop
  a4:	6c c0       	rjmp	.+216    	; 0x17e <__bad_interrupt>
  a6:	00 00       	nop
  a8:	6a c0       	rjmp	.+212    	; 0x17e <__bad_interrupt>
  aa:	00 00       	nop

000000ac <__trampolines_end>:
  ac:	2a 03       	fmul	r18, r18
  ae:	4c 00       	.word	0x004c	; ????
  b0:	55 00       	.word	0x0055	; ????
  b2:	46 00       	.word	0x0046	; ????
  b4:	41 00       	.word	0x0041	; ????
  b6:	20 00       	.word	0x0020	; ????
  b8:	43 00       	.word	0x0043	; ????
  ba:	44 00       	.word	0x0044	; ????
  bc:	43 00       	.word	0x0043	; ????
  be:	20 00       	.word	0x0020	; ????
  c0:	41 00       	.word	0x0041	; ????
  c2:	70 00       	.word	0x0070	; ????
  c4:	70 00       	.word	0x0070	; ????
  c6:	6c 00       	.word	0x006c	; ????
  c8:	69 00       	.word	0x0069	; ????
  ca:	63 00       	.word	0x0063	; ????
  cc:	61 00       	.word	0x0061	; ????
  ce:	74 00       	.word	0x0074	; ????
  d0:	69 00       	.word	0x0069	; ????
  d2:	6f 00       	.word	0x006f	; ????
  d4:	6e 00       	.word	0x006e	; ????
  d6:	00 00       	nop

000000d8 <manufacturer_string>:
  d8:	1a 03 4c 00 55 00 46 00 41 00 20 00 4c 00 69 00     ..L.U.F.A. .L.i.
  e8:	62 00 72 00 61 00 72 00 79 00 00 00                 b.r.a.r.y...

000000f4 <language_string>:
  f4:	04 03 09 04                                         ....

000000f8 <configuration_descriptor>:
  f8:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
 108:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
 118:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
 128:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000136 <device_descriptor>:
 136:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
 146:	dc 01                                               ..

00000148 <__ctors_end>:
 148:	11 24       	eor	r1, r1
 14a:	1f be       	out	0x3f, r1	; 63
 14c:	cf ef       	ldi	r28, 0xFF	; 255
 14e:	da e0       	ldi	r29, 0x0A	; 10
 150:	de bf       	out	0x3e, r29	; 62
 152:	cd bf       	out	0x3d, r28	; 61

00000154 <__do_copy_data>:
 154:	11 e0       	ldi	r17, 0x01	; 1
 156:	a0 e0       	ldi	r26, 0x00	; 0
 158:	b1 e0       	ldi	r27, 0x01	; 1
 15a:	e0 ee       	ldi	r30, 0xE0	; 224
 15c:	fe e0       	ldi	r31, 0x0E	; 14
 15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x10>
 160:	05 90       	lpm	r0, Z+
 162:	0d 92       	st	X+, r0
 164:	ac 31       	cpi	r26, 0x1C	; 28
 166:	b1 07       	cpc	r27, r17
 168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0xc>

0000016a <__do_clear_bss>:
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	ac e1       	ldi	r26, 0x1C	; 28
 16e:	b1 e0       	ldi	r27, 0x01	; 1
 170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
 172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
 174:	a9 32       	cpi	r26, 0x29	; 41
 176:	b2 07       	cpc	r27, r18
 178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
 17a:	1a d0       	rcall	.+52     	; 0x1b0 <main>
 17c:	af c6       	rjmp	.+3422   	; 0xedc <_exit>

0000017e <__bad_interrupt>:
 17e:	40 cf       	rjmp	.-384    	; 0x0 <__vectors>

00000180 <HardwareInit>:

#include "usb.h"

void HardwareInit(void) {
  // disable watchdog if enabled by bootloader/fuses
  MCUSR &= ~(1 << WDRF);
 180:	84 b7       	in	r24, 0x34	; 52
 182:	87 7f       	andi	r24, 0xF7	; 247
 184:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	a8 95       	wdr
 18c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 190:	88 61       	ori	r24, 0x18	; 24
 192:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 196:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 19a:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
 1a8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f8061>
 1ac:	0f be       	out	0x3f, r0	; 63

  // disable clock division
  clock_prescale_set(clock_div_1);

  // init lufa usb CDC device
  USB_Init();
 1ae:	53 c2       	rjmp	.+1190   	; 0x656 <USB_Init>

000001b0 <main>:
}

// The entry point for the application code
int main(void) {
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	1f 92       	push	r1
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
  uint16_t bytesReceived;
  uint8_t byte;

  HardwareInit();
 1ba:	e2 df       	rcall	.-60     	; 0x180 <HardwareInit>

  GlobalInterruptEnable();

  while (1) {
    bytesReceived = USBBytesReceived();
 1bc:	78 94       	sei
 1be:	40 d0       	rcall	.+128    	; 0x240 <USBBytesReceived>
 1c0:	8c 01       	movw	r16, r24
    while (bytesReceived-- > 0) {
 1c2:	01 50       	subi	r16, 0x01	; 1
 1c4:	11 09       	sbc	r17, r1
      USBReceiveByte(&byte);
      USBWSendByte(byte);
    }
    USBTask();
 1c6:	10 f4       	brcc	.+4      	; 0x1cc <main+0x1c>
 1c8:	37 d0       	rcall	.+110    	; 0x238 <USBTask>
  GlobalInterruptEnable();

  while (1) {
    bytesReceived = USBBytesReceived();
    while (bytesReceived-- > 0) {
      USBReceiveByte(&byte);
 1ca:	f9 cf       	rjmp	.-14     	; 0x1be <main+0xe>
 1cc:	ce 01       	movw	r24, r28
 1ce:	01 96       	adiw	r24, 0x01	; 1
      USBWSendByte(byte);
 1d0:	3a d0       	rcall	.+116    	; 0x246 <USBReceiveByte>
 1d2:	89 81       	ldd	r24, Y+1	; 0x01
 1d4:	52 d0       	rcall	.+164    	; 0x27a <USBWSendByte>
 1d6:	f5 cf       	rjmp	.-22     	; 0x1c2 <main+0x12>

000001d8 <CALLBACK_USB_GetDescriptor>:
        },
};

uint16_t CALLBACK_USB_GetDescriptor(const uint16_t value, const uint16_t index,
                                    const void **const descriptor_address) {
  const uint8_t descriptor_type = (value >> 8);
 1d8:	29 2f       	mov	r18, r25
 1da:	33 27       	eor	r19, r19
  const uint8_t descriptor_number = (value & 0xFF);

  const void *address = NULL;
  uint16_t size = NO_DESCRIPTOR;

  switch (descriptor_type) {
 1dc:	22 30       	cpi	r18, 0x02	; 2
 1de:	31 05       	cpc	r19, r1
 1e0:	71 f0       	breq	.+28     	; 0x1fe <CALLBACK_USB_GetDescriptor+0x26>
 1e2:	23 30       	cpi	r18, 0x03	; 3
 1e4:	31 05       	cpc	r19, r1
 1e6:	81 f0       	breq	.+32     	; 0x208 <CALLBACK_USB_GetDescriptor+0x30>
 1e8:	21 30       	cpi	r18, 0x01	; 1
 1ea:	31 05       	cpc	r19, r1
 1ec:	a1 f4       	brne	.+40     	; 0x216 <CALLBACK_USB_GetDescriptor+0x3e>
  case DTYPE_Device:
    address = &device_descriptor;
    size = sizeof(USB_Descriptor_Device_t);
 1ee:	82 e1       	ldi	r24, 0x12	; 18
 1f0:	90 e0       	ldi	r25, 0x00	; 0
  const void *address = NULL;
  uint16_t size = NO_DESCRIPTOR;

  switch (descriptor_type) {
  case DTYPE_Device:
    address = &device_descriptor;
 1f2:	26 e3       	ldi	r18, 0x36	; 54
 1f4:	31 e0       	ldi	r19, 0x01	; 1
    }

    break;
  }

  *descriptor_address = address;
 1f6:	fa 01       	movw	r30, r20
 1f8:	31 83       	std	Z+1, r19	; 0x01
 1fa:	20 83       	st	Z, r18
  return size;
}
 1fc:	08 95       	ret
    address = &device_descriptor;
    size = sizeof(USB_Descriptor_Device_t);
    break;
  case DTYPE_Configuration:
    address = &configuration_descriptor;
    size = sizeof(usb_descriptor_configuration_t);
 1fe:	8e e3       	ldi	r24, 0x3E	; 62
 200:	90 e0       	ldi	r25, 0x00	; 0
  case DTYPE_Device:
    address = &device_descriptor;
    size = sizeof(USB_Descriptor_Device_t);
    break;
  case DTYPE_Configuration:
    address = &configuration_descriptor;
 202:	28 ef       	ldi	r18, 0xF8	; 248
 204:	30 e0       	ldi	r19, 0x00	; 0
    size = sizeof(usb_descriptor_configuration_t);
    break;
 206:	f7 cf       	rjmp	.-18     	; 0x1f6 <CALLBACK_USB_GetDescriptor+0x1e>
  case DTYPE_String:
    switch (descriptor_number) {
 208:	99 27       	eor	r25, r25
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	91 05       	cpc	r25, r1
 20e:	71 f0       	breq	.+28     	; 0x22c <CALLBACK_USB_GetDescriptor+0x54>
 210:	38 f0       	brcs	.+14     	; 0x220 <CALLBACK_USB_GetDescriptor+0x48>
 212:	02 97       	sbiw	r24, 0x02	; 2
 214:	71 f0       	breq	.+28     	; 0x232 <CALLBACK_USB_GetDescriptor+0x5a>
                                    const void **const descriptor_address) {
  const uint8_t descriptor_type = (value >> 8);
  const uint8_t descriptor_number = (value & 0xFF);

  const void *address = NULL;
  uint16_t size = NO_DESCRIPTOR;
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	80 e0       	ldi	r24, 0x00	; 0
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t value, const uint16_t index,
                                    const void **const descriptor_address) {
  const uint8_t descriptor_type = (value >> 8);
  const uint8_t descriptor_number = (value & 0xFF);

  const void *address = NULL;
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	20 e0       	ldi	r18, 0x00	; 0
 21e:	eb cf       	rjmp	.-42     	; 0x1f6 <CALLBACK_USB_GetDescriptor+0x1e>
    break;
  case DTYPE_String:
    switch (descriptor_number) {
    case STRING_ID_Language:
      address = &language_string;
      size = pgm_read_byte(&language_string.Header.Size);
 220:	e4 ef       	ldi	r30, 0xF4	; 244
 222:	f0 e0       	ldi	r31, 0x00	; 0
      address = &manufacturer_string;
      size = pgm_read_byte(&manufacturer_string.Header.Size);
      break;
    case STRING_ID_Product:
      address = &product_string;
      size = pgm_read_byte(&product_string.Header.Size);
 224:	84 91       	lpm	r24, Z
 226:	90 e0       	ldi	r25, 0x00	; 0
    case STRING_ID_Manufacturer:
      address = &manufacturer_string;
      size = pgm_read_byte(&manufacturer_string.Header.Size);
      break;
    case STRING_ID_Product:
      address = &product_string;
 228:	9f 01       	movw	r18, r30
      size = pgm_read_byte(&product_string.Header.Size);
      break;
 22a:	e5 cf       	rjmp	.-54     	; 0x1f6 <CALLBACK_USB_GetDescriptor+0x1e>
      address = &language_string;
      size = pgm_read_byte(&language_string.Header.Size);
      break;
    case STRING_ID_Manufacturer:
      address = &manufacturer_string;
      size = pgm_read_byte(&manufacturer_string.Header.Size);
 22c:	e8 ed       	ldi	r30, 0xD8	; 216
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	f9 cf       	rjmp	.-14     	; 0x224 <CALLBACK_USB_GetDescriptor+0x4c>
      break;
    case STRING_ID_Product:
      address = &product_string;
      size = pgm_read_byte(&product_string.Header.Size);
 232:	ec ea       	ldi	r30, 0xAC	; 172
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	f6 cf       	rjmp	.-20     	; 0x224 <CALLBACK_USB_GetDescriptor+0x4c>

00000238 <USBTask>:
  *descriptor_address = address;
  return size;
}

void USBTask(void) {
  CDC_Device_USBTask(&cdc_interface);
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	27 d5       	rcall	.+2638   	; 0xc8c <CDC_Device_USBTask>
  USB_USBTask();
 23e:	8b c4       	rjmp	.+2326   	; 0xb56 <USB_USBTask>

00000240 <USBBytesReceived>:
 240:	80 e0       	ldi	r24, 0x00	; 0
}

uint16_t USBBytesReceived(void) {
  return CDC_Device_BytesReceived(&cdc_interface);
 242:	91 e0       	ldi	r25, 0x01	; 1
 244:	39 c5       	rjmp	.+2674   	; 0xcb8 <CDC_Device_BytesReceived>

00000246 <USBReceiveByte>:
}

int USBReceiveByte(uint8_t *byte) {
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	ec 01       	movw	r28, r24
  int16_t result = CDC_Device_ReceiveByte(&cdc_interface);
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	62 d5       	rcall	.+2756   	; 0xd16 <CDC_Device_ReceiveByte>
  if (byte != NULL && result >= 0) {
 252:	20 97       	sbiw	r28, 0x00	; 0
 254:	41 f0       	breq	.+16     	; 0x266 <USBReceiveByte+0x20>
 256:	97 fd       	sbrc	r25, 7
 258:	0d c0       	rjmp	.+26     	; 0x274 <USBReceiveByte+0x2e>
    *byte = (uint8_t)result;
 25a:	88 83       	st	Y, r24
  }
  return result >= 0 ? 0 : -1;
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	80 e0       	ldi	r24, 0x00	; 0
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret
int USBReceiveByte(uint8_t *byte) {
  int16_t result = CDC_Device_ReceiveByte(&cdc_interface);
  if (byte != NULL && result >= 0) {
    *byte = (uint8_t)result;
  }
  return result >= 0 ? 0 : -1;
 266:	89 2f       	mov	r24, r25
 268:	88 0f       	add	r24, r24
 26a:	88 0b       	sbc	r24, r24
 26c:	08 2e       	mov	r0, r24
 26e:	00 0c       	add	r0, r0
 270:	99 0b       	sbc	r25, r25
 272:	f6 cf       	rjmp	.-20     	; 0x260 <USBReceiveByte+0x1a>
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	9f ef       	ldi	r25, 0xFF	; 255
 278:	f3 cf       	rjmp	.-26     	; 0x260 <USBReceiveByte+0x1a>

0000027a <USBWSendByte>:
}

int USBWSendByte(uint8_t byte) {
  return CDC_Device_SendByte(&cdc_interface, byte);
 27a:	68 2f       	mov	r22, r24
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	aa d4       	rcall	.+2388   	; 0xbd6 <CDC_Device_SendByte>
}
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	08 95       	ret

00000286 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void) {
  // do nothing
}
 286:	08 95       	ret

00000288 <EVENT_USB_Device_Disconnect>:
 288:	08 95       	ret

0000028a <EVENT_USB_Device_ConfigurationChanged>:
  // do nothing
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void) {
  CDC_Device_ConfigureEndpoints(&cdc_interface);
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	91 e0       	ldi	r25, 0x01	; 1
 28e:	7e c4       	rjmp	.+2300   	; 0xb8c <CDC_Device_ConfigureEndpoints>

00000290 <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void) {
  CDC_Device_ProcessControlRequest(&cdc_interface);
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	78 c5       	rjmp	.+2800   	; 0xd86 <CDC_Device_ProcessControlRequest>

00000296 <EVENT_CDC_Device_ControLineStateChanged>:
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t *const cdc_interface_info) {
  bool dtr = cdc_interface_info->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR;
  uint32_t baud_rate = cdc_interface_info->State.LineEncoding.BaudRateBPS;

  if (baud_rate == 1200 && dtr == 0) {
 296:	fc 01       	movw	r30, r24
 298:	44 89       	ldd	r20, Z+20	; 0x14
 29a:	55 89       	ldd	r21, Z+21	; 0x15
 29c:	66 89       	ldd	r22, Z+22	; 0x16
 29e:	77 89       	ldd	r23, Z+23	; 0x17
 2a0:	40 3b       	cpi	r20, 0xB0	; 176
 2a2:	54 40       	sbci	r21, 0x04	; 4
 2a4:	61 05       	cpc	r22, r1
 2a6:	71 05       	cpc	r23, r1
 2a8:	c1 f4       	brne	.+48     	; 0x2da <EVENT_CDC_Device_ControLineStateChanged+0x44>
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface
 * configuration structure being referenced
 */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t *const cdc_interface_info) {
  bool dtr = cdc_interface_info->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR;
 2aa:	fc 01       	movw	r30, r24
 2ac:	80 89       	ldd	r24, Z+16	; 0x10
  uint32_t baud_rate = cdc_interface_info->State.LineEncoding.BaudRateBPS;

  if (baud_rate == 1200 && dtr == 0) {
 2ae:	80 fd       	sbrc	r24, 0
 2b0:	14 c0       	rjmp	.+40     	; 0x2da <EVENT_CDC_Device_ControLineStateChanged+0x44>
    *((uint16_t *)0x0800) = 0x7777;
 2b2:	87 e7       	ldi	r24, 0x77	; 119
 2b4:	97 e7       	ldi	r25, 0x77	; 119
 2b6:	90 93 01 08 	sts	0x0801, r25	; 0x800801 <__bss_end+0x6d8>
 2ba:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__bss_end+0x6d7>
    *((uint16_t *)0x0AFE) = 0x7777;
 2be:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x9d6>
 2c2:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x9d5>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 2c6:	88 e1       	ldi	r24, 0x18	; 24
 2c8:	9b e0       	ldi	r25, 0x0B	; 11
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	f8 94       	cli
 2ce:	a8 95       	wdr
 2d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
    wdt_enable(WDTO_120MS);
  }
}
 2da:	08 95       	ret

000002dc <Endpoint_Write_Control_Stream_LE>:
	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 2dc:	fc 01       	movw	r30, r24
 2de:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <USB_ControlRequest+0x6>
 2e2:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <USB_ControlRequest+0x7>
 2e6:	86 17       	cp	r24, r22
 2e8:	97 07       	cpc	r25, r23
 2ea:	a0 f0       	brcs	.+40     	; 0x314 <Endpoint_Write_Control_Stream_LE+0x38>
 2ec:	61 15       	cp	r22, r1
 2ee:	71 05       	cpc	r23, r1
 2f0:	29 f4       	brne	.+10     	; 0x2fc <Endpoint_Write_Control_Stream_LE+0x20>
 2f2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 2f6:	9e 77       	andi	r25, 0x7E	; 126
 2f8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	61 15       	cp	r22, r1
 300:	71 05       	cpc	r23, r1
 302:	51 f4       	brne	.+20     	; 0x318 <Endpoint_Write_Control_Stream_LE+0x3c>
 304:	91 11       	cpse	r25, r1
 306:	08 c0       	rjmp	.+16     	; 0x318 <Endpoint_Write_Control_Stream_LE+0x3c>
 308:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 30c:	82 ff       	sbrs	r24, 2
 30e:	35 c0       	rjmp	.+106    	; 0x37a <Endpoint_Write_Control_Stream_LE+0x9e>
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	08 95       	ret
 314:	bc 01       	movw	r22, r24
 316:	f2 cf       	rjmp	.-28     	; 0x2fc <Endpoint_Write_Control_Stream_LE+0x20>
 318:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_DeviceState>
 31c:	88 23       	and	r24, r24
 31e:	c9 f1       	breq	.+114    	; 0x392 <Endpoint_Write_Control_Stream_LE+0xb6>
 320:	85 30       	cpi	r24, 0x05	; 5
 322:	c9 f1       	breq	.+114    	; 0x396 <Endpoint_Write_Control_Stream_LE+0xba>
 324:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 328:	83 fd       	sbrc	r24, 3
 32a:	31 c0       	rjmp	.+98     	; 0x38e <Endpoint_Write_Control_Stream_LE+0xb2>
 32c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 330:	82 fd       	sbrc	r24, 2
 332:	ea cf       	rjmp	.-44     	; 0x308 <Endpoint_Write_Control_Stream_LE+0x2c>
 334:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 338:	80 ff       	sbrs	r24, 0
 33a:	e1 cf       	rjmp	.-62     	; 0x2fe <Endpoint_Write_Control_Stream_LE+0x22>
 33c:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 340:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 344:	32 2f       	mov	r19, r18
 346:	28 2f       	mov	r18, r24
 348:	61 15       	cp	r22, r1
 34a:	71 05       	cpc	r23, r1
 34c:	19 f0       	breq	.+6      	; 0x354 <Endpoint_Write_Control_Stream_LE+0x78>
 34e:	28 30       	cpi	r18, 0x08	; 8
 350:	31 05       	cpc	r19, r1
 352:	58 f0       	brcs	.+22     	; 0x36a <Endpoint_Write_Control_Stream_LE+0x8e>
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	28 30       	cpi	r18, 0x08	; 8
 358:	31 05       	cpc	r19, r1
 35a:	09 f0       	breq	.+2      	; 0x35e <Endpoint_Write_Control_Stream_LE+0x82>
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 362:	2e 77       	andi	r18, 0x7E	; 126
 364:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 368:	ca cf       	rjmp	.-108    	; 0x2fe <Endpoint_Write_Control_Stream_LE+0x22>
 36a:	81 91       	ld	r24, Z+
 36c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 370:	61 50       	subi	r22, 0x01	; 1
 372:	71 09       	sbc	r23, r1
 374:	2f 5f       	subi	r18, 0xFF	; 255
 376:	3f 4f       	sbci	r19, 0xFF	; 255
 378:	e7 cf       	rjmp	.-50     	; 0x348 <Endpoint_Write_Control_Stream_LE+0x6c>
 37a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_DeviceState>
 37e:	88 23       	and	r24, r24
 380:	41 f0       	breq	.+16     	; 0x392 <Endpoint_Write_Control_Stream_LE+0xb6>
 382:	85 30       	cpi	r24, 0x05	; 5
 384:	41 f0       	breq	.+16     	; 0x396 <Endpoint_Write_Control_Stream_LE+0xba>
 386:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 38a:	83 ff       	sbrs	r24, 3
 38c:	bd cf       	rjmp	.-134    	; 0x308 <Endpoint_Write_Control_Stream_LE+0x2c>
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	08 95       	ret
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	08 95       	ret
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	08 95       	ret

0000039a <Endpoint_Write_Control_PStream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
 39a:	fc 01       	movw	r30, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 39c:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <USB_ControlRequest+0x6>
 3a0:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <USB_ControlRequest+0x7>
 3a4:	86 17       	cp	r24, r22
 3a6:	97 07       	cpc	r25, r23
 3a8:	a0 f0       	brcs	.+40     	; 0x3d2 <Endpoint_Write_Control_PStream_LE+0x38>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 3aa:	61 15       	cp	r22, r1
 3ac:	71 05       	cpc	r23, r1
 3ae:	29 f4       	brne	.+10     	; 0x3ba <Endpoint_Write_Control_PStream_LE+0x20>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 3b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 3b4:	8e 77       	andi	r24, 0x7E	; 126
 3b6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 3ba:	90 e0       	ldi	r25, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 3bc:	61 15       	cp	r22, r1
 3be:	71 05       	cpc	r23, r1
 3c0:	51 f4       	brne	.+20     	; 0x3d6 <Endpoint_Write_Control_PStream_LE+0x3c>
 3c2:	91 11       	cpse	r25, r1
 3c4:	08 c0       	rjmp	.+16     	; 0x3d6 <Endpoint_Write_Control_PStream_LE+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 3ca:	82 ff       	sbrs	r24, 2
 3cc:	36 c0       	rjmp	.+108    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	08 95       	ret
 3d2:	bc 01       	movw	r22, r24
 3d4:	f2 cf       	rjmp	.-28     	; 0x3ba <Endpoint_Write_Control_PStream_LE+0x20>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 3d6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 3da:	88 23       	and	r24, r24
 3dc:	d1 f1       	breq	.+116    	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 3de:	85 30       	cpi	r24, 0x05	; 5
 3e0:	d1 f1       	breq	.+116    	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 3e2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 3e6:	83 fd       	sbrc	r24, 3
 3e8:	32 c0       	rjmp	.+100    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 3ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 3ee:	82 fd       	sbrc	r24, 2
 3f0:	ea cf       	rjmp	.-44     	; 0x3c6 <Endpoint_Write_Control_PStream_LE+0x2c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 3f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  break;

		if (Endpoint_IsINReady())
 3f6:	80 ff       	sbrs	r24, 0
 3f8:	e1 cf       	rjmp	.-62     	; 0x3bc <Endpoint_Write_Control_PStream_LE+0x22>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 3fa:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 3fe:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 402:	32 2f       	mov	r19, r18
 404:	28 2f       	mov	r18, r24
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 406:	61 15       	cp	r22, r1
 408:	71 05       	cpc	r23, r1
 40a:	19 f0       	breq	.+6      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40c:	28 30       	cpi	r18, 0x08	; 8
 40e:	31 05       	cpc	r19, r1
 410:	58 f0       	brcs	.+22     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	28 30       	cpi	r18, 0x08	; 8
 416:	31 05       	cpc	r19, r1
 418:	09 f0       	breq	.+2      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41a:	90 e0       	ldi	r25, 0x00	; 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 41c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 420:	8e 77       	andi	r24, 0x7E	; 126
 422:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 426:	ca cf       	rjmp	.-108    	; 0x3bc <Endpoint_Write_Control_PStream_LE+0x22>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 428:	84 91       	lpm	r24, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 42a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 42e:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 430:	61 50       	subi	r22, 0x01	; 1
 432:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 434:	2f 5f       	subi	r18, 0xFF	; 255
 436:	3f 4f       	sbci	r19, 0xFF	; 255
 438:	e6 cf       	rjmp	.-52     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 43a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 43e:	88 23       	and	r24, r24
 440:	41 f0       	breq	.+16     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 442:	85 30       	cpi	r24, 0x05	; 5
 444:	41 f0       	breq	.+16     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 446:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 44a:	83 ff       	sbrs	r24, 3
 44c:	bc cf       	rjmp	.-136    	; 0x3c6 <Endpoint_Write_Control_PStream_LE+0x2c>
		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 44e:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 450:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 452:	82 e0       	ldi	r24, 0x02	; 2
 454:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 456:	83 e0       	ldi	r24, 0x03	; 3
 458:	08 95       	ret

0000045a <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 45a:	98 2f       	mov	r25, r24
 45c:	97 30       	cpi	r25, 0x07	; 7
 45e:	28 f0       	brcs	.+10     	; 0x46a <Endpoint_ConfigureEndpoint_Prv+0x10>
 460:	8f 70       	andi	r24, 0x0F	; 15
 462:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	08 95       	ret
 46a:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 46e:	24 2f       	mov	r18, r20
 470:	76 2f       	mov	r23, r22
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	98 17       	cp	r25, r24
 476:	31 f0       	breq	.+12     	; 0x484 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 478:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
 47c:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
 480:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 484:	21 fd       	sbrc	r18, 1
 486:	02 c0       	rjmp	.+4      	; 0x48c <Endpoint_ConfigureEndpoint_Prv+0x32>
 488:	9f 5f       	subi	r25, 0xFF	; 255
 48a:	e8 cf       	rjmp	.-48     	; 0x45c <Endpoint_ConfigureEndpoint_Prv+0x2>
 48c:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 490:	3e 7f       	andi	r19, 0xFE	; 254
 492:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 496:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
 49a:	3d 7f       	andi	r19, 0xFD	; 253
 49c:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
 4a0:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 4a4:	31 60       	ori	r19, 0x01	; 1
 4a6:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 4aa:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
 4ae:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7f80ed>
 4b2:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 4b6:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7f80ee>
 4ba:	27 fd       	sbrc	r18, 7
 4bc:	e5 cf       	rjmp	.-54     	; 0x488 <Endpoint_ConfigureEndpoint_Prv+0x2e>
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	08 95       	ret

000004c2 <Endpoint_ConfigureEndpointTable>:
 4c2:	0f 93       	push	r16
 4c4:	1f 93       	push	r17
 4c6:	cf 93       	push	r28
 4c8:	df 93       	push	r29
 4ca:	06 2f       	mov	r16, r22
 4cc:	ec 01       	movw	r28, r24
 4ce:	10 e0       	ldi	r17, 0x00	; 0
 4d0:	10 13       	cpse	r17, r16
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <Endpoint_ConfigureEndpointTable+0x16>
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	0f c0       	rjmp	.+30     	; 0x4f6 <Endpoint_ConfigureEndpointTable+0x34>
 4d8:	98 81       	ld	r25, Y
 4da:	91 11       	cpse	r25, r1
 4dc:	03 c0       	rjmp	.+6      	; 0x4e4 <Endpoint_ConfigureEndpointTable+0x22>
 4de:	1f 5f       	subi	r17, 0xFF	; 255
 4e0:	25 96       	adiw	r28, 0x05	; 5
 4e2:	f6 cf       	rjmp	.-20     	; 0x4d0 <Endpoint_ConfigureEndpointTable+0xe>
 4e4:	2c 81       	ldd	r18, Y+4	; 0x04
 4e6:	a9 81       	ldd	r26, Y+1	; 0x01
 4e8:	ba 81       	ldd	r27, Y+2	; 0x02
 4ea:	6b 81       	ldd	r22, Y+3	; 0x03
 4ec:	89 2f       	mov	r24, r25
 4ee:	8f 70       	andi	r24, 0x0F	; 15
 4f0:	87 30       	cpi	r24, 0x07	; 7
 4f2:	30 f0       	brcs	.+12     	; 0x500 <Endpoint_ConfigureEndpointTable+0x3e>
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	1f 91       	pop	r17
 4fc:	0f 91       	pop	r16
 4fe:	08 95       	ret
 500:	42 e0       	ldi	r20, 0x02	; 2
 502:	22 30       	cpi	r18, 0x02	; 2
 504:	08 f0       	brcs	.+2      	; 0x508 <Endpoint_ConfigureEndpointTable+0x46>
 506:	46 e0       	ldi	r20, 0x06	; 6
 508:	e8 e0       	ldi	r30, 0x08	; 8
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	20 e0       	ldi	r18, 0x00	; 0
 50e:	ea 17       	cp	r30, r26
 510:	fb 07       	cpc	r31, r27
 512:	78 f0       	brcs	.+30     	; 0x532 <Endpoint_ConfigureEndpointTable+0x70>
 514:	22 95       	swap	r18
 516:	20 7f       	andi	r18, 0xF0	; 240
 518:	42 2b       	or	r20, r18
 51a:	20 e4       	ldi	r18, 0x40	; 64
 51c:	62 9f       	mul	r22, r18
 51e:	b0 01       	movw	r22, r0
 520:	11 24       	eor	r1, r1
 522:	99 1f       	adc	r25, r25
 524:	99 27       	eor	r25, r25
 526:	99 1f       	adc	r25, r25
 528:	69 2b       	or	r22, r25
 52a:	97 df       	rcall	.-210    	; 0x45a <Endpoint_ConfigureEndpoint_Prv>
 52c:	81 11       	cpse	r24, r1
 52e:	d7 cf       	rjmp	.-82     	; 0x4de <Endpoint_ConfigureEndpointTable+0x1c>
 530:	e1 cf       	rjmp	.-62     	; 0x4f4 <Endpoint_ConfigureEndpointTable+0x32>
 532:	2f 5f       	subi	r18, 0xFF	; 255
 534:	ee 0f       	add	r30, r30
 536:	ff 1f       	adc	r31, r31
 538:	ea cf       	rjmp	.-44     	; 0x50e <Endpoint_ConfigureEndpointTable+0x4c>

0000053a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 53a:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <USB_ControlRequest>
 53e:	87 ff       	sbrs	r24, 7
 540:	13 c0       	rjmp	.+38     	; 0x568 <Endpoint_ClearStatusStage+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 542:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	{
		while (!(Endpoint_IsOUTReceived()))
 546:	82 ff       	sbrs	r24, 2
 548:	06 c0       	rjmp	.+12     	; 0x556 <Endpoint_ClearStatusStage+0x1c>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 54a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 54e:	8b 77       	andi	r24, 0x7B	; 123
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 550:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 554:	04 c0       	rjmp	.+8      	; 0x55e <Endpoint_ClearStatusStage+0x24>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 556:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_DeviceState>
 55a:	81 11       	cpse	r24, r1
 55c:	f2 cf       	rjmp	.-28     	; 0x542 <Endpoint_ClearStatusStage+0x8>
			  return;
		}

		Endpoint_ClearIN();
	}
}
 55e:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 560:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_DeviceState>
 564:	88 23       	and	r24, r24
 566:	d9 f3       	breq	.-10     	; 0x55e <Endpoint_ClearStatusStage+0x24>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 568:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 56c:	80 ff       	sbrs	r24, 0
 56e:	f8 cf       	rjmp	.-16     	; 0x560 <Endpoint_ClearStatusStage+0x26>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 570:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 574:	8e 77       	andi	r24, 0x7E	; 126
 576:	ec cf       	rjmp	.-40     	; 0x550 <Endpoint_ClearStatusStage+0x16>

00000578 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 578:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
 57c:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
 580:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 582:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
 586:	90 ff       	sbrs	r25, 0
 588:	06 c0       	rjmp	.+12     	; 0x596 <Endpoint_WaitUntilReady+0x1e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 58a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 58e:	90 ff       	sbrs	r25, 0
 590:	06 c0       	rjmp	.+12     	; 0x59e <Endpoint_WaitUntilReady+0x26>
			  return ENDPOINT_READYWAIT_NoError;
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 596:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 59a:	92 fd       	sbrc	r25, 2
 59c:	fa cf       	rjmp	.-12     	; 0x592 <Endpoint_WaitUntilReady+0x1a>
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 59e:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 5a2:	99 23       	and	r25, r25
 5a4:	91 f0       	breq	.+36     	; 0x5ca <Endpoint_WaitUntilReady+0x52>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 5a6:	95 30       	cpi	r25, 0x05	; 5
 5a8:	91 f0       	breq	.+36     	; 0x5ce <Endpoint_WaitUntilReady+0x56>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 5aa:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 5ae:	95 fd       	sbrc	r25, 5
 5b0:	10 c0       	rjmp	.+32     	; 0x5d2 <Endpoint_WaitUntilReady+0x5a>
 5b2:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7f80e4>
 5b6:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7f80e5>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 5ba:	24 17       	cp	r18, r20
 5bc:	35 07       	cpc	r19, r21
 5be:	09 f3       	breq	.-62     	; 0x582 <Endpoint_WaitUntilReady+0xa>
 5c0:	81 50       	subi	r24, 0x01	; 1
 5c2:	9a 01       	movw	r18, r20
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 5c4:	f1 f6       	brne	.-68     	; 0x582 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 5c6:	84 e0       	ldi	r24, 0x04	; 4
 5c8:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 5ca:	82 e0       	ldi	r24, 0x02	; 2
 5cc:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 5ce:	83 e0       	ldi	r24, 0x03	; 3
 5d0:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 5d2:	81 e0       	ldi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 5d4:	08 95       	ret

000005d6 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 5d6:	0f 93       	push	r16
 5d8:	1f 93       	push	r17
 5da:	cf 93       	push	r28
 5dc:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 5de:	4b d0       	rcall	.+150    	; 0x676 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 5e0:	52 d0       	rcall	.+164    	; 0x686 <USB_INT_ClearAllInterrupts>
 5e2:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 5e4:	d0 e0       	ldi	r29, 0x00	; 0
 5e6:	88 81       	ld	r24, Y
 5e8:	8f 77       	andi	r24, 0x7F	; 127
 5ea:	88 83       	st	Y, r24
 5ec:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 5ee:	80 68       	ori	r24, 0x80	; 128
 5f0:	88 83       	st	Y, r24
 5f2:	88 81       	ld	r24, Y
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 5f4:	8f 7d       	andi	r24, 0xDF	; 223
 5f6:	88 83       	st	Y, r24
 5f8:	19 bc       	out	0x29, r1	; 41
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 5fa:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 5fe:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
	USB_Device_ConfigurationNumber  = 0;
 602:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 606:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 60a:	00 ee       	ldi	r16, 0xE0	; 224
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 60c:	10 e0       	ldi	r17, 0x00	; 0
 60e:	f8 01       	movw	r30, r16
 610:	80 81       	ld	r24, Z
 612:	8b 7f       	andi	r24, 0xFB	; 251
 614:	80 83       	st	Z, r24
 616:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 618:	81 60       	ori	r24, 0x01	; 1
 61a:	88 83       	st	Y, r24
 61c:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 61e:	60 e0       	ldi	r22, 0x00	; 0
 620:	80 e0       	ldi	r24, 0x00	; 0
 622:	1b df       	rcall	.-458    	; 0x45a <Endpoint_ConfigureEndpoint_Prv>
 624:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	8e 7f       	andi	r24, 0xFE	; 254
 62c:	80 83       	st	Z, r24
 62e:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	80 81       	ld	r24, Z
 634:	81 60       	ori	r24, 0x01	; 1
 636:	80 83       	st	Z, r24
 638:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 63a:	88 60       	ori	r24, 0x08	; 8
 63c:	80 83       	st	Z, r24
 63e:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			ATTR_ALWAYS_INLINE
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 640:	80 81       	ld	r24, Z
 642:	8e 7f       	andi	r24, 0xFE	; 254
 644:	80 83       	st	Z, r24
 646:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			ATTR_ALWAYS_INLINE
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 648:	80 61       	ori	r24, 0x10	; 16
 64a:	88 83       	st	Y, r24
 64c:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 64e:	cf 91       	pop	r28
 650:	1f 91       	pop	r17
 652:	0f 91       	pop	r16
 654:	08 95       	ret

00000656 <USB_Init>:
 656:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	80 81       	ld	r24, Z
 65c:	8f 7e       	andi	r24, 0xEF	; 239
 65e:	80 83       	st	Z, r24

			ATTR_ALWAYS_INLINE
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 660:	e7 ed       	ldi	r30, 0xD7	; 215
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	80 81       	ld	r24, Z
 666:	81 60       	ori	r24, 0x01	; 1
 668:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
 66a:	84 e0       	ldi	r24, 0x04	; 4
 66c:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <USB_IsInitialized>

	USB_ResetInterface();
 674:	b0 cf       	rjmp	.-160    	; 0x5d6 <USB_ResetInterface>

00000676 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
 676:	e8 ed       	ldi	r30, 0xD8	; 216
 678:	f0 e0       	ldi	r31, 0x00	; 0
 67a:	80 81       	ld	r24, Z
 67c:	8e 7f       	andi	r24, 0xFE	; 254
 67e:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 680:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
	#endif
}
 684:	08 95       	ret

00000686 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 686:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 68a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	#endif
}
 68e:	08 95       	ret

00000690 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
 690:	1f 92       	push	r1
 692:	0f 92       	push	r0
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	0f 92       	push	r0
 698:	11 24       	eor	r1, r1
 69a:	2f 93       	push	r18
 69c:	3f 93       	push	r19
 69e:	4f 93       	push	r20
 6a0:	5f 93       	push	r21
 6a2:	6f 93       	push	r22
 6a4:	7f 93       	push	r23
 6a6:	8f 93       	push	r24
 6a8:	9f 93       	push	r25
 6aa:	af 93       	push	r26
 6ac:	bf 93       	push	r27
 6ae:	ef 93       	push	r30
 6b0:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 6b2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 6b6:	82 ff       	sbrs	r24, 2
 6b8:	0a c0       	rjmp	.+20     	; 0x6ce <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 6ba:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 6be:	82 ff       	sbrs	r24, 2
 6c0:	06 c0       	rjmp	.+12     	; 0x6ce <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 6c2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
 6c6:	8b 7f       	andi	r24, 0xFB	; 251
 6c8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 6cc:	43 d2       	rcall	.+1158   	; 0xb54 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 6ce:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 6d2:	80 ff       	sbrs	r24, 0
 6d4:	18 c0       	rjmp	.+48     	; 0x706 <__vector_10+0x76>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 6d6:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
 6da:	80 ff       	sbrs	r24, 0
 6dc:	14 c0       	rjmp	.+40     	; 0x706 <__vector_10+0x76>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 6de:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
 6e2:	8e 7f       	andi	r24, 0xFE	; 254
 6e4:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__TEXT_REGION_LENGTH__+0x7f80da>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 6e8:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__TEXT_REGION_LENGTH__+0x7f80d9>
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 6ec:	80 ff       	sbrs	r24, 0
 6ee:	8f c0       	rjmp	.+286    	; 0x80e <__vector_10+0x17e>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 6f0:	80 e1       	ldi	r24, 0x10	; 16
 6f2:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 6f4:	82 e1       	ldi	r24, 0x12	; 18
 6f6:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 6f8:	09 b4       	in	r0, 0x29	; 41
 6fa:	00 fe       	sbrs	r0, 0
 6fc:	fd cf       	rjmp	.-6      	; 0x6f8 <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 6fe:	81 e0       	ldi	r24, 0x01	; 1
 700:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_DeviceState>
			EVENT_USB_Device_Connect();
 704:	c0 dd       	rcall	.-1152   	; 0x286 <EVENT_USB_Device_Connect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 706:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 70a:	80 ff       	sbrs	r24, 0
 70c:	18 c0       	rjmp	.+48     	; 0x73e <__vector_10+0xae>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 70e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 712:	80 ff       	sbrs	r24, 0
 714:	14 c0       	rjmp	.+40     	; 0x73e <__vector_10+0xae>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 716:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 71a:	8e 7f       	andi	r24, 0xFE	; 254
 71c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 720:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 724:	80 61       	ori	r24, 0x10	; 16
 726:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 72a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
 72e:	80 62       	ori	r24, 0x20	; 32
 730:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 734:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 736:	85 e0       	ldi	r24, 0x05	; 5
 738:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 73c:	0b d2       	rcall	.+1046   	; 0xb54 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 73e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 742:	84 ff       	sbrs	r24, 4
 744:	28 c0       	rjmp	.+80     	; 0x796 <__vector_10+0x106>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 746:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 74a:	84 ff       	sbrs	r24, 4
 74c:	24 c0       	rjmp	.+72     	; 0x796 <__vector_10+0x106>

		/* Inline Functions: */
			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 74e:	80 e1       	ldi	r24, 0x10	; 16
 750:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 752:	82 e1       	ldi	r24, 0x12	; 18
 754:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 756:	09 b4       	in	r0, 0x29	; 41
 758:	00 fe       	sbrs	r0, 0
 75a:	fd cf       	rjmp	.-6      	; 0x756 <__vector_10+0xc6>
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 75c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
 760:	8f 7d       	andi	r24, 0xDF	; 223
 762:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7f80d8>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 766:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
 76a:	8f 7e       	andi	r24, 0xEF	; 239
 76c:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 770:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 774:	8f 7e       	andi	r24, 0xEF	; 239
 776:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 77a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 77e:	81 60       	ori	r24, 0x01	; 1
 780:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 784:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 788:	88 23       	and	r24, r24
 78a:	09 f4       	brne	.+2      	; 0x78e <__vector_10+0xfe>
 78c:	45 c0       	rjmp	.+138    	; 0x818 <__vector_10+0x188>
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 78e:	84 e0       	ldi	r24, 0x04	; 4
 790:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 794:	df d1       	rcall	.+958    	; 0xb54 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 796:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 79a:	83 ff       	sbrs	r24, 3
 79c:	27 c0       	rjmp	.+78     	; 0x7ec <__vector_10+0x15c>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 79e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 7a2:	83 ff       	sbrs	r24, 3
 7a4:	23 c0       	rjmp	.+70     	; 0x7ec <__vector_10+0x15c>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 7a6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
 7aa:	87 7f       	andi	r24, 0xF7	; 247
 7ac:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 7b0:	82 e0       	ldi	r24, 0x02	; 2
 7b2:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 7b6:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 7ba:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
 7be:	8e 7f       	andi	r24, 0xFE	; 254
 7c0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7f80e1>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 7c4:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 7c8:	8e 7f       	andi	r24, 0xFE	; 254
 7ca:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 7ce:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
 7d2:	80 61       	ori	r24, 0x10	; 16
 7d4:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7f80e2>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 7d8:	42 e0       	ldi	r20, 0x02	; 2
 7da:	60 e0       	ldi	r22, 0x00	; 0
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	3d de       	rcall	.-902    	; 0x45a <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 7e0:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 7e4:	88 60       	ori	r24, 0x08	; 8
 7e6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 7ea:	b4 d1       	rcall	.+872    	; 0xb54 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 7ec:	ff 91       	pop	r31
 7ee:	ef 91       	pop	r30
 7f0:	bf 91       	pop	r27
 7f2:	af 91       	pop	r26
 7f4:	9f 91       	pop	r25
 7f6:	8f 91       	pop	r24
 7f8:	7f 91       	pop	r23
 7fa:	6f 91       	pop	r22
 7fc:	5f 91       	pop	r21
 7fe:	4f 91       	pop	r20
 800:	3f 91       	pop	r19
 802:	2f 91       	pop	r18
 804:	0f 90       	pop	r0
 806:	0f be       	out	0x3f, r0	; 63
 808:	0f 90       	pop	r0
 80a:	1f 90       	pop	r1
			}

			ATTR_ALWAYS_INLINE
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 80c:	18 95       	reti
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 80e:	19 bc       	out	0x29, r1	; 41
 810:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 814:	39 dd       	rcall	.-1422   	; 0x288 <EVENT_USB_Device_Disconnect>
 816:	77 cf       	rjmp	.-274    	; 0x706 <__vector_10+0x76>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 818:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 81c:	87 fd       	sbrc	r24, 7
 81e:	02 c0       	rjmp	.+4      	; 0x824 <__vector_10+0x194>
 820:	81 e0       	ldi	r24, 0x01	; 1
 822:	b6 cf       	rjmp	.-148    	; 0x790 <__vector_10+0x100>
 824:	83 e0       	ldi	r24, 0x03	; 3
 826:	b4 cf       	rjmp	.-152    	; 0x790 <__vector_10+0x100>

00000828 <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
 828:	1f 92       	push	r1
 82a:	0f 92       	push	r0
 82c:	0f b6       	in	r0, 0x3f	; 63
 82e:	0f 92       	push	r0
 830:	11 24       	eor	r1, r1
 832:	2f 93       	push	r18
 834:	3f 93       	push	r19
 836:	4f 93       	push	r20
 838:	5f 93       	push	r21
 83a:	6f 93       	push	r22
 83c:	7f 93       	push	r23
 83e:	8f 93       	push	r24
 840:	9f 93       	push	r25
 842:	af 93       	push	r26
 844:	bf 93       	push	r27
 846:	cf 93       	push	r28
 848:	ef 93       	push	r30
 84a:	ff 93       	push	r31
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 84c:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 850:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 852:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 856:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
 85a:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 85e:	87 7f       	andi	r24, 0xF7	; 247
 860:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
 864:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
 866:	1b d0       	rcall	.+54     	; 0x89e <USB_Device_ProcessControlRequest>
 868:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
 86c:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 870:	88 60       	ori	r24, 0x08	; 8
 872:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7f80f0>
 876:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
 87a:	ff 91       	pop	r31
 87c:	ef 91       	pop	r30
 87e:	cf 91       	pop	r28
 880:	bf 91       	pop	r27
 882:	af 91       	pop	r26
 884:	9f 91       	pop	r25
 886:	8f 91       	pop	r24
 888:	7f 91       	pop	r23
 88a:	6f 91       	pop	r22
 88c:	5f 91       	pop	r21
 88e:	4f 91       	pop	r20
 890:	3f 91       	pop	r19
 892:	2f 91       	pop	r18
 894:	0f 90       	pop	r0
 896:	0f be       	out	0x3f, r0	; 63
 898:	0f 90       	pop	r0
 89a:	1f 90       	pop	r1
 89c:	18 95       	reti

0000089e <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 89e:	1f 93       	push	r17
 8a0:	cf 93       	push	r28
 8a2:	df 93       	push	r29
 8a4:	cd b7       	in	r28, 0x3d	; 61
 8a6:	de b7       	in	r29, 0x3e	; 62
 8a8:	aa 97       	sbiw	r28, 0x2a	; 42
 8aa:	0f b6       	in	r0, 0x3f	; 63
 8ac:	f8 94       	cli
 8ae:	de bf       	out	0x3e, r29	; 62
 8b0:	0f be       	out	0x3f, r0	; 63
 8b2:	cd bf       	out	0x3d, r28	; 61
 8b4:	e1 e2       	ldi	r30, 0x21	; 33
 8b6:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 8b8:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 8bc:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 8be:	21 e0       	ldi	r18, 0x01	; 1
 8c0:	e9 32       	cpi	r30, 0x29	; 41
 8c2:	f2 07       	cpc	r31, r18
 8c4:	c9 f7       	brne	.-14     	; 0x8b8 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 8c6:	e4 dc       	rcall	.-1592   	; 0x290 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 8c8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	if (Endpoint_IsSETUPReceived())
 8cc:	83 ff       	sbrs	r24, 3
 8ce:	10 c0       	rjmp	.+32     	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 8d0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 8d4:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <USB_ControlRequest+0x1>
 8d8:	95 30       	cpi	r25, 0x05	; 5
 8da:	09 f4       	brne	.+2      	; 0x8de <USB_Device_ProcessControlRequest+0x40>
 8dc:	d8 c0       	rjmp	.+432    	; 0xa8e <__DATA_REGION_LENGTH__+0x8e>
 8de:	00 f5       	brcc	.+64     	; 0x920 <USB_Device_ProcessControlRequest+0x82>
 8e0:	91 30       	cpi	r25, 0x01	; 1
 8e2:	09 f4       	brne	.+2      	; 0x8e6 <USB_Device_ProcessControlRequest+0x48>
 8e4:	8b c0       	rjmp	.+278    	; 0x9fc <USB_Device_ProcessControlRequest+0x15e>
 8e6:	08 f4       	brcc	.+2      	; 0x8ea <USB_Device_ProcessControlRequest+0x4c>
 8e8:	61 c0       	rjmp	.+194    	; 0x9ac <USB_Device_ProcessControlRequest+0x10e>
 8ea:	93 30       	cpi	r25, 0x03	; 3
 8ec:	09 f4       	brne	.+2      	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
 8ee:	86 c0       	rjmp	.+268    	; 0x9fc <USB_Device_ProcessControlRequest+0x15e>
 8f0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 8f4:	83 ff       	sbrs	r24, 3
 8f6:	0a c0       	rjmp	.+20     	; 0x90c <USB_Device_ProcessControlRequest+0x6e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 8f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 8fc:	87 7f       	andi	r24, 0xF7	; 247
 8fe:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 902:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 906:	80 62       	ori	r24, 0x20	; 32
 908:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 90c:	aa 96       	adiw	r28, 0x2a	; 42
 90e:	0f b6       	in	r0, 0x3f	; 63
 910:	f8 94       	cli
 912:	de bf       	out	0x3e, r29	; 62
 914:	0f be       	out	0x3f, r0	; 63
 916:	cd bf       	out	0x3d, r28	; 61
 918:	df 91       	pop	r29
 91a:	cf 91       	pop	r28
 91c:	1f 91       	pop	r17
 91e:	08 95       	ret

	if (Endpoint_IsSETUPReceived())
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
 920:	98 30       	cpi	r25, 0x08	; 8
 922:	09 f4       	brne	.+2      	; 0x926 <USB_Device_ProcessControlRequest+0x88>
 924:	ec c0       	rjmp	.+472    	; 0xafe <__DATA_REGION_LENGTH__+0xfe>
 926:	99 30       	cpi	r25, 0x09	; 9
 928:	09 f4       	brne	.+2      	; 0x92c <USB_Device_ProcessControlRequest+0x8e>
 92a:	f6 c0       	rjmp	.+492    	; 0xb18 <__stack+0x19>
 92c:	96 30       	cpi	r25, 0x06	; 6
 92e:	01 f7       	brne	.-64     	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 930:	80 58       	subi	r24, 0x80	; 128
 932:	82 30       	cpi	r24, 0x02	; 2
 934:	e8 f6       	brcc	.-70     	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 936:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <USB_ControlRequest+0x2>
 93a:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <USB_ControlRequest+0x3>
 93e:	8c 3d       	cpi	r24, 0xDC	; 220
 940:	23 e0       	ldi	r18, 0x03	; 3
 942:	92 07       	cpc	r25, r18
 944:	09 f0       	breq	.+2      	; 0x948 <USB_Device_ProcessControlRequest+0xaa>
 946:	c6 c0       	rjmp	.+396    	; 0xad4 <__DATA_REGION_LENGTH__+0xd4>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 948:	83 e0       	ldi	r24, 0x03	; 3
 94a:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 94c:	8a e2       	ldi	r24, 0x2A	; 42
 94e:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 950:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 952:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 954:	de 01       	movw	r26, r28
 956:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 958:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 95a:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 95c:	51 e2       	ldi	r21, 0x21	; 33
 95e:	e3 2f       	mov	r30, r19
 960:	f0 e0       	ldi	r31, 0x00	; 0
 962:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7f8057>
 966:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 968:	20 ff       	sbrs	r18, 0
 96a:	03 c0       	rjmp	.+6      	; 0x972 <USB_Device_ProcessControlRequest+0xd4>
					{
						SerialByte >>= 4;
 96c:	e2 95       	swap	r30
 96e:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 970:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 972:	ef 70       	andi	r30, 0x0F	; 15
 974:	8e 2f       	mov	r24, r30
 976:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 978:	ea 30       	cpi	r30, 0x0A	; 10
 97a:	08 f4       	brcc	.+2      	; 0x97e <USB_Device_ProcessControlRequest+0xe0>
 97c:	a9 c0       	rjmp	.+338    	; 0xad0 <__DATA_REGION_LENGTH__+0xd0>
 97e:	c7 96       	adiw	r24, 0x37	; 55
 980:	8d 93       	st	X+, r24
 982:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 984:	2f 5f       	subi	r18, 0xFF	; 255
 986:	24 31       	cpi	r18, 0x14	; 20
 988:	51 f7       	brne	.-44     	; 0x95e <USB_Device_ProcessControlRequest+0xc0>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 98a:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 98c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 990:	87 7f       	andi	r24, 0xF7	; 247
 992:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 996:	6a e2       	ldi	r22, 0x2A	; 42
 998:	70 e0       	ldi	r23, 0x00	; 0
 99a:	ce 01       	movw	r24, r28
 99c:	01 96       	adiw	r24, 0x01	; 1
 99e:	9e dc       	rcall	.-1732   	; 0x2dc <Endpoint_Write_Control_Stream_LE>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 9a0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 9a4:	8b 77       	andi	r24, 0x7B	; 123
 9a6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 9aa:	a2 cf       	rjmp	.-188    	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9ac:	80 38       	cpi	r24, 0x80	; 128
 9ae:	99 f0       	breq	.+38     	; 0x9d6 <USB_Device_ProcessControlRequest+0x138>
 9b0:	82 38       	cpi	r24, 0x82	; 130
 9b2:	09 f0       	breq	.+2      	; 0x9b6 <USB_Device_ProcessControlRequest+0x118>
 9b4:	9d cf       	rjmp	.-198    	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 9b6:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_ControlRequest+0x4>
 9ba:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 9bc:	87 30       	cpi	r24, 0x07	; 7
 9be:	08 f0       	brcs	.+2      	; 0x9c2 <USB_Device_ProcessControlRequest+0x124>
 9c0:	97 cf       	rjmp	.-210    	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9c2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 9c6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 9ca:	85 fb       	bst	r24, 5
 9cc:	88 27       	eor	r24, r24
 9ce:	80 f9       	bld	r24, 0
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 9d0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 9d4:	06 c0       	rjmp	.+12     	; 0x9e2 <USB_Device_ProcessControlRequest+0x144>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 9d6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 9da:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <USB_Device_RemoteWakeupEnabled>
 9de:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 9e0:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9e2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 9e6:	97 7f       	andi	r25, 0xF7	; 247
 9e8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 9ec:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 8);
 9f0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 9f4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 9f8:	8e 77       	andi	r24, 0x7E	; 126
 9fa:	32 c0       	rjmp	.+100    	; 0xa60 <__DATA_REGION_LENGTH__+0x60>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9fc:	28 2f       	mov	r18, r24
 9fe:	2d 7f       	andi	r18, 0xFD	; 253
 a00:	09 f0       	breq	.+2      	; 0xa04 <__DATA_REGION_LENGTH__+0x4>
 a02:	76 cf       	rjmp	.-276    	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 a04:	88 23       	and	r24, r24
 a06:	e9 f0       	breq	.+58     	; 0xa42 <__DATA_REGION_LENGTH__+0x42>
 a08:	82 30       	cpi	r24, 0x02	; 2
 a0a:	09 f0       	breq	.+2      	; 0xa0e <__DATA_REGION_LENGTH__+0xe>
 a0c:	71 cf       	rjmp	.-286    	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 a0e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <USB_ControlRequest+0x2>
 a12:	81 11       	cpse	r24, r1
 a14:	20 c0       	rjmp	.+64     	; 0xa56 <__DATA_REGION_LENGTH__+0x56>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 a16:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_ControlRequest+0x4>
 a1a:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 a1c:	2f ef       	ldi	r18, 0xFF	; 255
 a1e:	28 0f       	add	r18, r24
 a20:	26 30       	cpi	r18, 0x06	; 6
 a22:	08 f0       	brcs	.+2      	; 0xa26 <__DATA_REGION_LENGTH__+0x26>
 a24:	65 cf       	rjmp	.-310    	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a26:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 a2a:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 a2e:	20 ff       	sbrs	r18, 0
 a30:	12 c0       	rjmp	.+36     	; 0xa56 <__DATA_REGION_LENGTH__+0x56>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 a32:	93 30       	cpi	r25, 0x03	; 3
 a34:	c9 f4       	brne	.+50     	; 0xa68 <__DATA_REGION_LENGTH__+0x68>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a36:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 a3a:	80 62       	ori	r24, 0x20	; 32

			/** Resets the data toggle of the currently selected endpoint. */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a3c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 a40:	0a c0       	rjmp	.+20     	; 0xa56 <__DATA_REGION_LENGTH__+0x56>
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 a42:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <USB_ControlRequest+0x2>
 a46:	81 30       	cpi	r24, 0x01	; 1
 a48:	09 f0       	breq	.+2      	; 0xa4c <__DATA_REGION_LENGTH__+0x4c>
 a4a:	52 cf       	rjmp	.-348    	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 a4c:	93 30       	cpi	r25, 0x03	; 3
 a4e:	09 f0       	breq	.+2      	; 0xa52 <__DATA_REGION_LENGTH__+0x52>
 a50:	80 e0       	ldi	r24, 0x00	; 0
 a52:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <USB_Device_RemoteWakeupEnabled>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 a56:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 a5e:	87 7f       	andi	r24, 0xF7	; 247
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a60:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 a64:	6a dd       	rcall	.-1324   	; 0x53a <Endpoint_ClearStatusStage>
 a66:	44 cf       	rjmp	.-376    	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 a68:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 a6c:	90 61       	ori	r25, 0x10	; 16
 a6e:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 a72:	21 e0       	ldi	r18, 0x01	; 1
 a74:	30 e0       	ldi	r19, 0x00	; 0
 a76:	01 c0       	rjmp	.+2      	; 0xa7a <__DATA_REGION_LENGTH__+0x7a>
 a78:	22 0f       	add	r18, r18
 a7a:	8a 95       	dec	r24
 a7c:	ea f7       	brpl	.-6      	; 0xa78 <__DATA_REGION_LENGTH__+0x78>
 a7e:	20 93 ea 00 	sts	0x00EA, r18	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>
				UERST = 0;
 a82:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7f80ea>

			/** Resets the data toggle of the currently selected endpoint. */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 a86:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7f80eb>
 a8a:	88 60       	ori	r24, 0x08	; 8
 a8c:	d7 cf       	rjmp	.-82     	; 0xa3c <__DATA_REGION_LENGTH__+0x3c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a8e:	81 11       	cpse	r24, r1
 a90:	2f cf       	rjmp	.-418    	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 a92:	10 91 23 01 	lds	r17, 0x0123	; 0x800123 <USB_ControlRequest+0x2>
 a96:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			ATTR_ALWAYS_INLINE
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 a98:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
 a9c:	80 78       	andi	r24, 0x80	; 128
 a9e:	81 2b       	or	r24, r17
 aa0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aa4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 aa8:	87 7f       	andi	r24, 0xF7	; 247
 aaa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 aae:	45 dd       	rcall	.-1398   	; 0x53a <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 ab0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	while (!(Endpoint_IsINReady()));
 ab4:	80 ff       	sbrs	r24, 0
 ab6:	fc cf       	rjmp	.-8      	; 0xab0 <__DATA_REGION_LENGTH__+0xb0>
			ATTR_ALWAYS_INLINE
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 ab8:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
 abc:	80 68       	ori	r24, 0x80	; 128
 abe:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 ac2:	83 e0       	ldi	r24, 0x03	; 3
 ac4:	11 11       	cpse	r17, r1
 ac6:	01 c0       	rjmp	.+2      	; 0xaca <__DATA_REGION_LENGTH__+0xca>
 ac8:	82 e0       	ldi	r24, 0x02	; 2
 aca:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_DeviceState>
 ace:	10 cf       	rjmp	.-480    	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
						SigReadAddress++;
					}

					SerialByte &= 0x0F;

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 ad0:	c0 96       	adiw	r24, 0x30	; 48
 ad2:	56 cf       	rjmp	.-340    	; 0x980 <USB_Device_ProcessControlRequest+0xe2>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 ad4:	60 91 25 01 	lds	r22, 0x0125	; 0x800125 <USB_ControlRequest+0x4>
 ad8:	70 91 26 01 	lds	r23, 0x0126	; 0x800126 <USB_ControlRequest+0x5>
 adc:	ae 01       	movw	r20, r28
 ade:	4f 5f       	subi	r20, 0xFF	; 255
 ae0:	5f 4f       	sbci	r21, 0xFF	; 255
 ae2:	7a db       	rcall	.-2316   	; 0x1d8 <CALLBACK_USB_GetDescriptor>
 ae4:	bc 01       	movw	r22, r24
 ae6:	89 2b       	or	r24, r25
 ae8:	09 f4       	brne	.+2      	; 0xaec <__DATA_REGION_LENGTH__+0xec>
 aea:	02 cf       	rjmp	.-508    	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aec:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 af0:	97 7f       	andi	r25, 0xF7	; 247
 af2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 af6:	89 81       	ldd	r24, Y+1	; 0x01
 af8:	9a 81       	ldd	r25, Y+2	; 0x02
 afa:	4f dc       	rcall	.-1890   	; 0x39a <Endpoint_Write_Control_PStream_LE>
 afc:	51 cf       	rjmp	.-350    	; 0x9a0 <USB_Device_ProcessControlRequest+0x102>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 afe:	80 38       	cpi	r24, 0x80	; 128
 b00:	09 f0       	breq	.+2      	; 0xb04 <__stack+0x5>
 b02:	f6 ce       	rjmp	.-532    	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
 b04:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 b08:	87 7f       	andi	r24, 0xF7	; 247
 b0a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 b0e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 b12:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 b16:	6e cf       	rjmp	.-292    	; 0x9f4 <USB_Device_ProcessControlRequest+0x156>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 b18:	81 11       	cpse	r24, r1
 b1a:	ea ce       	rjmp	.-556    	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 b1c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <USB_ControlRequest+0x2>
 b20:	92 30       	cpi	r25, 0x02	; 2
 b22:	08 f0       	brcs	.+2      	; 0xb26 <__stack+0x27>
 b24:	e5 ce       	rjmp	.-566    	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 b2a:	87 7f       	andi	r24, 0xF7	; 247
 b2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 b30:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <__data_end>

	Endpoint_ClearStatusStage();
 b34:	02 dd       	rcall	.-1532   	; 0x53a <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 b36:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 b3a:	88 23       	and	r24, r24
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b3c:	29 f0       	breq	.+10     	; 0xb48 <__stack+0x49>
 b3e:	84 e0       	ldi	r24, 0x04	; 4
 b40:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 b44:	a2 db       	rcall	.-2236   	; 0x28a <EVENT_USB_Device_ConfigurationChanged>
 b46:	d4 ce       	rjmp	.-600    	; 0x8f0 <USB_Device_ProcessControlRequest+0x52>
			}

			ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 b48:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7f80e3>
	Endpoint_ClearStatusStage();

	if (USB_Device_ConfigurationNumber)
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 b4c:	87 fd       	sbrc	r24, 7
 b4e:	f7 cf       	rjmp	.-18     	; 0xb3e <__stack+0x3f>
 b50:	81 e0       	ldi	r24, 0x01	; 1
 b52:	f6 cf       	rjmp	.-20     	; 0xb40 <__stack+0x41>

00000b54 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
 b54:	08 95       	ret

00000b56 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 b56:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 b58:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_DeviceState>
 b5c:	88 23       	and	r24, r24
 b5e:	91 f0       	breq	.+36     	; 0xb84 <USB_USBTask+0x2e>
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 b60:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 b64:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 b66:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7f80ec>
 b6a:	80 fd       	sbrc	r24, 0
 b6c:	0d c0       	rjmp	.+26     	; 0xb88 <USB_USBTask+0x32>
 b6e:	80 e0       	ldi	r24, 0x00	; 0
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 b70:	c8 2b       	or	r28, r24
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b72:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b76:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 b7a:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 b7c:	90 de       	rcall	.-736    	; 0x89e <USB_Device_ProcessControlRequest>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 b7e:	cf 70       	andi	r28, 0x0F	; 15
 b80:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 b84:	cf 91       	pop	r28
 b86:	08 95       	ret
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 b88:	80 e8       	ldi	r24, 0x80	; 128
 b8a:	f2 cf       	rjmp	.-28     	; 0xb70 <USB_USBTask+0x1a>

00000b8c <CDC_Device_ConfigureEndpoints>:
	void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
	                                     FILE* const Stream)
	{
		*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
		fdev_set_udata(Stream, CDCInterfaceInfo);
	}
 b8c:	cf 93       	push	r28
 b8e:	df 93       	push	r29
 b90:	ec 01       	movw	r28, r24
 b92:	fc 01       	movw	r30, r24
 b94:	70 96       	adiw	r30, 0x10	; 16
 b96:	8b e0       	ldi	r24, 0x0B	; 11
 b98:	df 01       	movw	r26, r30
 b9a:	1d 92       	st	X+, r1
 b9c:	8a 95       	dec	r24
 b9e:	e9 f7       	brne	.-6      	; 0xb9a <CDC_Device_ConfigureEndpoints+0xe>
 ba0:	82 e0       	ldi	r24, 0x02	; 2
 ba2:	8c 83       	std	Y+4, r24	; 0x04
 ba4:	89 87       	std	Y+9, r24	; 0x09
 ba6:	83 e0       	ldi	r24, 0x03	; 3
 ba8:	8e 87       	std	Y+14, r24	; 0x0e
 baa:	61 e0       	ldi	r22, 0x01	; 1
 bac:	ce 01       	movw	r24, r28
 bae:	01 96       	adiw	r24, 0x01	; 1
 bb0:	88 dc       	rcall	.-1776   	; 0x4c2 <Endpoint_ConfigureEndpointTable>
 bb2:	88 23       	and	r24, r24
 bb4:	61 f0       	breq	.+24     	; 0xbce <CDC_Device_ConfigureEndpoints+0x42>
 bb6:	61 e0       	ldi	r22, 0x01	; 1
 bb8:	ce 01       	movw	r24, r28
 bba:	06 96       	adiw	r24, 0x06	; 6
 bbc:	82 dc       	rcall	.-1788   	; 0x4c2 <Endpoint_ConfigureEndpointTable>
 bbe:	88 23       	and	r24, r24
 bc0:	31 f0       	breq	.+12     	; 0xbce <CDC_Device_ConfigureEndpoints+0x42>
 bc2:	61 e0       	ldi	r22, 0x01	; 1
 bc4:	ce 01       	movw	r24, r28
 bc6:	0b 96       	adiw	r24, 0x0b	; 11
 bc8:	df 91       	pop	r29
 bca:	cf 91       	pop	r28
 bcc:	7a cc       	rjmp	.-1804   	; 0x4c2 <Endpoint_ConfigureEndpointTable>
 bce:	80 e0       	ldi	r24, 0x00	; 0
 bd0:	df 91       	pop	r29
 bd2:	cf 91       	pop	r28
 bd4:	08 95       	ret

00000bd6 <CDC_Device_SendByte>:
 bd6:	0f 93       	push	r16
 bd8:	1f 93       	push	r17
 bda:	cf 93       	push	r28
 bdc:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <USB_DeviceState>
 be0:	24 30       	cpi	r18, 0x04	; 4
 be2:	11 f5       	brne	.+68     	; 0xc28 <CDC_Device_SendByte+0x52>
 be4:	fc 01       	movw	r30, r24
 be6:	04 89       	ldd	r16, Z+20	; 0x14
 be8:	15 89       	ldd	r17, Z+21	; 0x15
 bea:	26 89       	ldd	r18, Z+22	; 0x16
 bec:	37 89       	ldd	r19, Z+23	; 0x17
 bee:	01 2b       	or	r16, r17
 bf0:	02 2b       	or	r16, r18
 bf2:	03 2b       	or	r16, r19
 bf4:	c9 f0       	breq	.+50     	; 0xc28 <CDC_Device_SendByte+0x52>
 bf6:	c6 2f       	mov	r28, r22
 bf8:	81 81       	ldd	r24, Z+1	; 0x01
 bfa:	8f 70       	andi	r24, 0x0F	; 15
 bfc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 c00:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 c04:	85 ff       	sbrs	r24, 5
 c06:	07 c0       	rjmp	.+14     	; 0xc16 <CDC_Device_SendByte+0x40>
 c08:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 c0c:	80 e0       	ldi	r24, 0x00	; 0
 c0e:	cf 91       	pop	r28
 c10:	1f 91       	pop	r17
 c12:	0f 91       	pop	r16
 c14:	08 95       	ret
 c16:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 c1a:	8e 77       	andi	r24, 0x7E	; 126
 c1c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 c20:	ab dc       	rcall	.-1706   	; 0x578 <Endpoint_WaitUntilReady>
 c22:	88 23       	and	r24, r24
 c24:	89 f3       	breq	.-30     	; 0xc08 <CDC_Device_SendByte+0x32>
 c26:	f3 cf       	rjmp	.-26     	; 0xc0e <CDC_Device_SendByte+0x38>
 c28:	82 e0       	ldi	r24, 0x02	; 2
 c2a:	f1 cf       	rjmp	.-30     	; 0xc0e <CDC_Device_SendByte+0x38>

00000c2c <CDC_Device_Flush>:
 c2c:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <USB_DeviceState>
 c30:	24 30       	cpi	r18, 0x04	; 4
 c32:	51 f5       	brne	.+84     	; 0xc88 <CDC_Device_Flush+0x5c>
 c34:	fc 01       	movw	r30, r24
 c36:	44 89       	ldd	r20, Z+20	; 0x14
 c38:	55 89       	ldd	r21, Z+21	; 0x15
 c3a:	66 89       	ldd	r22, Z+22	; 0x16
 c3c:	77 89       	ldd	r23, Z+23	; 0x17
 c3e:	45 2b       	or	r20, r21
 c40:	46 2b       	or	r20, r22
 c42:	47 2b       	or	r20, r23
 c44:	09 f1       	breq	.+66     	; 0xc88 <CDC_Device_Flush+0x5c>
 c46:	81 81       	ldd	r24, Z+1	; 0x01
 c48:	8f 70       	andi	r24, 0x0F	; 15
 c4a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 c4e:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 c52:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 c56:	89 27       	eor	r24, r25
 c58:	98 27       	eor	r25, r24
 c5a:	89 27       	eor	r24, r25
 c5c:	89 2b       	or	r24, r25
 c5e:	11 f4       	brne	.+4      	; 0xc64 <CDC_Device_Flush+0x38>
 c60:	80 e0       	ldi	r24, 0x00	; 0
 c62:	08 95       	ret
 c64:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 c68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 c6c:	8e 77       	andi	r24, 0x7E	; 126
 c6e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 c72:	95 fd       	sbrc	r25, 5
 c74:	f5 cf       	rjmp	.-22     	; 0xc60 <CDC_Device_Flush+0x34>
 c76:	80 dc       	rcall	.-1792   	; 0x578 <Endpoint_WaitUntilReady>
 c78:	81 11       	cpse	r24, r1
 c7a:	07 c0       	rjmp	.+14     	; 0xc8a <CDC_Device_Flush+0x5e>
 c7c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 c80:	9e 77       	andi	r25, 0x7E	; 126
 c82:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 c86:	08 95       	ret
 c88:	82 e0       	ldi	r24, 0x02	; 2
 c8a:	08 95       	ret

00000c8c <CDC_Device_USBTask>:
 c8c:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <USB_DeviceState>
 c90:	24 30       	cpi	r18, 0x04	; 4
 c92:	89 f4       	brne	.+34     	; 0xcb6 <CDC_Device_USBTask+0x2a>
 c94:	fc 01       	movw	r30, r24
 c96:	44 89       	ldd	r20, Z+20	; 0x14
 c98:	55 89       	ldd	r21, Z+21	; 0x15
 c9a:	66 89       	ldd	r22, Z+22	; 0x16
 c9c:	77 89       	ldd	r23, Z+23	; 0x17
 c9e:	45 2b       	or	r20, r21
 ca0:	46 2b       	or	r20, r22
 ca2:	47 2b       	or	r20, r23
 ca4:	41 f0       	breq	.+16     	; 0xcb6 <CDC_Device_USBTask+0x2a>
 ca6:	21 81       	ldd	r18, Z+1	; 0x01
 ca8:	2f 70       	andi	r18, 0x0F	; 15
 caa:	20 93 e9 00 	sts	0x00E9, r18	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 cae:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 cb2:	20 fd       	sbrc	r18, 0
 cb4:	bb cf       	rjmp	.-138    	; 0xc2c <CDC_Device_Flush>
 cb6:	08 95       	ret

00000cb8 <CDC_Device_BytesReceived>:
 cb8:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <USB_DeviceState>
 cbc:	24 30       	cpi	r18, 0x04	; 4
 cbe:	19 f0       	breq	.+6      	; 0xcc6 <CDC_Device_BytesReceived+0xe>
 cc0:	90 e0       	ldi	r25, 0x00	; 0
 cc2:	80 e0       	ldi	r24, 0x00	; 0
 cc4:	08 95       	ret
 cc6:	fc 01       	movw	r30, r24
 cc8:	44 89       	ldd	r20, Z+20	; 0x14
 cca:	55 89       	ldd	r21, Z+21	; 0x15
 ccc:	66 89       	ldd	r22, Z+22	; 0x16
 cce:	77 89       	ldd	r23, Z+23	; 0x17
 cd0:	45 2b       	or	r20, r21
 cd2:	46 2b       	or	r20, r22
 cd4:	47 2b       	or	r20, r23
 cd6:	a1 f3       	breq	.-24     	; 0xcc0 <CDC_Device_BytesReceived+0x8>
 cd8:	86 81       	ldd	r24, Z+6	; 0x06
 cda:	8f 70       	andi	r24, 0x0F	; 15
 cdc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 ce0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 ce4:	82 ff       	sbrs	r24, 2
 ce6:	ec cf       	rjmp	.-40     	; 0xcc0 <CDC_Device_BytesReceived+0x8>
 ce8:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 cec:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 cf0:	89 27       	eor	r24, r25
 cf2:	98 27       	eor	r25, r24
 cf4:	89 27       	eor	r24, r25
 cf6:	00 97       	sbiw	r24, 0x00	; 0
 cf8:	31 f4       	brne	.+12     	; 0xd06 <CDC_Device_BytesReceived+0x4e>
 cfa:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 cfe:	2b 77       	andi	r18, 0x7B	; 123
 d00:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 d04:	08 95       	ret
 d06:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 d0a:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 d0e:	89 27       	eor	r24, r25
 d10:	98 27       	eor	r25, r24
 d12:	89 27       	eor	r24, r25
 d14:	08 95       	ret

00000d16 <CDC_Device_ReceiveByte>:
 d16:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <USB_DeviceState>
 d1a:	24 30       	cpi	r18, 0x04	; 4
 d1c:	19 f0       	breq	.+6      	; 0xd24 <CDC_Device_ReceiveByte+0xe>
 d1e:	8f ef       	ldi	r24, 0xFF	; 255
 d20:	9f ef       	ldi	r25, 0xFF	; 255
 d22:	08 95       	ret
 d24:	fc 01       	movw	r30, r24
 d26:	44 89       	ldd	r20, Z+20	; 0x14
 d28:	55 89       	ldd	r21, Z+21	; 0x15
 d2a:	66 89       	ldd	r22, Z+22	; 0x16
 d2c:	77 89       	ldd	r23, Z+23	; 0x17
 d2e:	45 2b       	or	r20, r21
 d30:	46 2b       	or	r20, r22
 d32:	47 2b       	or	r20, r23
 d34:	a1 f3       	breq	.-24     	; 0xd1e <CDC_Device_ReceiveByte+0x8>
 d36:	86 81       	ldd	r24, Z+6	; 0x06
 d38:	8f 70       	andi	r24, 0x0F	; 15
 d3a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7f80e9>
 d3e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 d42:	82 ff       	sbrs	r24, 2
 d44:	ec cf       	rjmp	.-40     	; 0xd1e <CDC_Device_ReceiveByte+0x8>
 d46:	80 91 f3 00 	lds	r24, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 d4a:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 d4e:	89 27       	eor	r24, r25
 d50:	98 27       	eor	r25, r24
 d52:	89 27       	eor	r24, r25
 d54:	89 2b       	or	r24, r25
 d56:	91 f0       	breq	.+36     	; 0xd7c <CDC_Device_ReceiveByte+0x66>
 d58:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
 d5c:	90 e0       	ldi	r25, 0x00	; 0
 d5e:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7f80f3>
 d62:	30 91 f2 00 	lds	r19, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7f80f2>
 d66:	23 27       	eor	r18, r19
 d68:	32 27       	eor	r19, r18
 d6a:	23 27       	eor	r18, r19
 d6c:	23 2b       	or	r18, r19
 d6e:	29 f4       	brne	.+10     	; 0xd7a <CDC_Device_ReceiveByte+0x64>
 d70:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 d74:	2b 77       	andi	r18, 0x7B	; 123
 d76:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 d7a:	08 95       	ret
 d7c:	8f ef       	ldi	r24, 0xFF	; 255
 d7e:	9f ef       	ldi	r25, 0xFF	; 255
 d80:	ee cf       	rjmp	.-36     	; 0xd5e <CDC_Device_ReceiveByte+0x48>

00000d82 <CDC_Device_Event_Stub>:
#endif

void CDC_Device_Event_Stub(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{

}
 d82:	08 95       	ret

00000d84 <CDC_Device_Event_Stub_2>:

void CDC_Device_Event_Stub_2(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo, const uint8_t _1)
{
	CDC_Device_Event_Stub(CDCInterfaceInfo);
}
 d84:	08 95       	ret

00000d86 <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
 d86:	cf 93       	push	r28
 d88:	df 93       	push	r29
 d8a:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 d8c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
	if (!(Endpoint_IsSETUPReceived()))
 d90:	83 ff       	sbrs	r24, 3
 d92:	10 c0       	rjmp	.+32     	; 0xdb4 <CDC_Device_ProcessControlRequest+0x2e>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
 d94:	28 81       	ld	r18, Y
 d96:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <USB_ControlRequest+0x4>
 d9a:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <USB_ControlRequest+0x5>
 d9e:	28 17       	cp	r18, r24
 da0:	19 06       	cpc	r1, r25
 da2:	41 f4       	brne	.+16     	; 0xdb4 <CDC_Device_ProcessControlRequest+0x2e>
	  return;

	switch (USB_ControlRequest.bRequest)
 da4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <USB_ControlRequest+0x1>
 da8:	81 32       	cpi	r24, 0x21	; 33
 daa:	e1 f0       	breq	.+56     	; 0xde4 <CDC_Device_ProcessControlRequest+0x5e>
 dac:	30 f4       	brcc	.+12     	; 0xdba <CDC_Device_ProcessControlRequest+0x34>
 dae:	80 32       	cpi	r24, 0x20	; 32
 db0:	09 f4       	brne	.+2      	; 0xdb4 <CDC_Device_ProcessControlRequest+0x2e>
 db2:	4d c0       	rjmp	.+154    	; 0xe4e <CDC_Device_ProcessControlRequest+0xc8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 db4:	df 91       	pop	r29
 db6:	cf 91       	pop	r28
 db8:	08 95       	ret
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
	  return;

	switch (USB_ControlRequest.bRequest)
 dba:	82 32       	cpi	r24, 0x22	; 34
 dbc:	09 f4       	brne	.+2      	; 0xdc0 <CDC_Device_ProcessControlRequest+0x3a>
 dbe:	79 c0       	rjmp	.+242    	; 0xeb2 <CDC_Device_ProcessControlRequest+0x12c>
 dc0:	83 32       	cpi	r24, 0x23	; 35
 dc2:	c1 f7       	brne	.-16     	; 0xdb4 <CDC_Device_ProcessControlRequest+0x2e>
				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 dc4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <USB_ControlRequest>
 dc8:	81 32       	cpi	r24, 0x21	; 33
 dca:	a1 f7       	brne	.-24     	; 0xdb4 <CDC_Device_ProcessControlRequest+0x2e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 dcc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 dd0:	87 7f       	andi	r24, 0xF7	; 247
 dd2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 dd6:	b1 db       	rcall	.-2206   	; 0x53a <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 dd8:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <USB_ControlRequest+0x2>
 ddc:	ce 01       	movw	r24, r28
			}

			break;
	}
}
 dde:	df 91       	pop	r29
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
 de0:	cf 91       	pop	r28
 de2:	d0 cf       	rjmp	.-96     	; 0xd84 <CDC_Device_Event_Stub_2>
	  return;

	switch (USB_ControlRequest.bRequest)
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 de4:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <USB_ControlRequest>
 de8:	81 3a       	cpi	r24, 0xA1	; 161
 dea:	21 f7       	brne	.-56     	; 0xdb4 <CDC_Device_ProcessControlRequest+0x2e>
 dec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 df0:	87 7f       	andi	r24, 0xF7	; 247
 df2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 df6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
 dfa:	80 ff       	sbrs	r24, 0
 dfc:	fc cf       	rjmp	.-8      	; 0xdf6 <CDC_Device_ProcessControlRequest+0x70>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
 dfe:	8c 89       	ldd	r24, Y+20	; 0x14
 e00:	9d 89       	ldd	r25, Y+21	; 0x15
 e02:	ae 89       	ldd	r26, Y+22	; 0x16
 e04:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
 e06:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 8);
 e0a:	49 2f       	mov	r20, r25
 e0c:	5a 2f       	mov	r21, r26
 e0e:	6b 2f       	mov	r22, r27
 e10:	77 27       	eor	r23, r23
 e12:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 16);
 e16:	ad 01       	movw	r20, r26
 e18:	66 27       	eor	r22, r22
 e1a:	77 27       	eor	r23, r23
 e1c:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				UEDATX = (Data >> 24);
 e20:	8b 2f       	mov	r24, r27
 e22:	99 27       	eor	r25, r25
 e24:	aa 27       	eor	r26, r26
 e26:	bb 27       	eor	r27, r27
 e28:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
 e2c:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 e2e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
 e32:	89 8d       	ldd	r24, Y+25	; 0x19
 e34:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
 e38:	8a 8d       	ldd	r24, Y+26	; 0x1a
 e3a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e3e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 e42:	8e 77       	andi	r24, 0x7E	; 126
 e44:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 e48:	df 91       	pop	r29
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 e4a:	cf 91       	pop	r28
 e4c:	76 cb       	rjmp	.-2324   	; 0x53a <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 e4e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <USB_ControlRequest>
 e52:	81 32       	cpi	r24, 0x21	; 33
 e54:	09 f0       	breq	.+2      	; 0xe58 <CDC_Device_ProcessControlRequest+0xd2>
 e56:	ae cf       	rjmp	.-164    	; 0xdb4 <CDC_Device_ProcessControlRequest+0x2e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 e58:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 e5c:	87 7f       	andi	r24, 0xF7	; 247
 e5e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 e62:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
 e66:	82 ff       	sbrs	r24, 2
 e68:	1f c0       	rjmp	.+62     	; 0xea8 <CDC_Device_ProcessControlRequest+0x122>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
 e6a:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				Data.Bytes[1] = UEDATX;
 e6e:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				Data.Bytes[2] = UEDATX;
 e72:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				Data.Bytes[3] = UEDATX;
 e76:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
 e7a:	3c 8b       	std	Y+20, r19	; 0x14
 e7c:	2d 8b       	std	Y+21, r18	; 0x15
 e7e:	9e 8b       	std	Y+22, r25	; 0x16
 e80:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 e82:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
 e86:	88 8f       	std	Y+24, r24	; 0x18
 e88:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
 e8c:	89 8f       	std	Y+25, r24	; 0x19
 e8e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7f80f1>
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
 e92:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 e94:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 e98:	8b 77       	andi	r24, 0x7B	; 123
 e9a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 e9e:	4d db       	rcall	.-2406   	; 0x53a <Endpoint_ClearStatusStage>
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 ea0:	ce 01       	movw	r24, r28
 ea2:	df 91       	pop	r29
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
 ea4:	cf 91       	pop	r28
 ea6:	6d cf       	rjmp	.-294    	; 0xd82 <CDC_Device_Event_Stub>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 ea8:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <USB_DeviceState>
 eac:	81 11       	cpse	r24, r1
 eae:	d9 cf       	rjmp	.-78     	; 0xe62 <CDC_Device_ProcessControlRequest+0xdc>
 eb0:	81 cf       	rjmp	.-254    	; 0xdb4 <CDC_Device_ProcessControlRequest+0x2e>
				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 eb2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <USB_ControlRequest>
 eb6:	81 32       	cpi	r24, 0x21	; 33
 eb8:	09 f0       	breq	.+2      	; 0xebc <CDC_Device_ProcessControlRequest+0x136>
 eba:	7c cf       	rjmp	.-264    	; 0xdb4 <CDC_Device_ProcessControlRequest+0x2e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			ATTR_ALWAYS_INLINE
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 ebc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
 ec0:	87 7f       	andi	r24, 0xF7	; 247
 ec2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7f80e8>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 ec6:	39 db       	rcall	.-2446   	; 0x53a <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
 ec8:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <USB_ControlRequest+0x2>
 ecc:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <USB_ControlRequest+0x3>
 ed0:	99 8b       	std	Y+17, r25	; 0x11

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 ed2:	88 8b       	std	Y+16, r24	; 0x10
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
 ed4:	ce 01       	movw	r24, r28
 ed6:	df 91       	pop	r29
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
 ed8:	cf 91       	pop	r28
 eda:	dd c9       	rjmp	.-3142   	; 0x296 <EVENT_CDC_Device_ControLineStateChanged>

00000edc <_exit>:
 edc:	f8 94       	cli

00000ede <__stop_program>:
 ede:	ff cf       	rjmp	.-2      	; 0xede <__stop_program>
